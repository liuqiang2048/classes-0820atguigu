package com.atguigu.chapter05

object Scala06_Function {
def main(args: Array[String]): Unit = {

  //TODO 函数式编程  --噩梦版
  //
  //从语法的角度来讲  马丁能识别的语法  就不需要写
  //原则：能省则省
  //前提：编译器的动态判定功能
  //TODO 1.函数可以自动将最后一行代码的结果作为函数的返回值

  //1.省略return
  //原因：函数可以自动将最后一行代码的结果作为函数的返回值
  def fun1(): String = {
     "zhangqiang"
  }

  def fun2(): String = {
    "lisi"
  }
  println(fun1())

  //2.省略方法体花括号
   //原因：如果函数逻辑代码只有一行，那么大括号可以省略
  def fun3(): String = "zhangsan"

  //3.省略返回值类型
  //原因：根据方法体内字符串的类型  就可以判断出返回值类型
  def fun4() = "zhangsan"

  //4.省略参数列表
  //原因：没有参数的时候，可以省略
  def fun5 = "zhangsan"

  //5省略等号
  //原因：如果函数明确没有返回值，那么函数体中的return关键字不起作用
  //      如果函数体中存在return关键字，那么返回值类型不能省略
  //      不想声明返回值类型，但是又不想return关键字起作用
  //      此时，可以连同返回值类型和等号一起省略，称之为过程函数，没有结果

  def fun6() {
  return "zhsnagsan"
}
  //省略名称和关键字
  //原因： 如果不关心函数名称，只关心逻辑的时候，函数和def可以省略

      //(把名字和关键字取消，就成了)匿名函数，其无法直接调用，需要赋值交给其他变量来调用
      //如果函数声明时省略了参数列表，那么调用时也不能加参数列表
  val f = () => {
    println("zhangsan")
  }
    f()  //调用它无参

  //省略前后函数作用域对比
  //省略前：作用域  只在当前花括号内使用

  //省略后：作用域  可以在整个类中使用
}
}
